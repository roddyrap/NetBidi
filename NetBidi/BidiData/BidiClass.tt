<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Text.RegularExpressions.dll" #>
<#@ include file="BidiData/BidiInfra.ttinclude" #>
<#=AutoGenerateComment()#>
<#
string bidiClasssFileString = GetWebFile("https://www.unicode.org/Public/UNIDATA/extracted/DerivedBidiClass.txt");

// Get unicode version by searching for the first version in the bidi type file.
System.Text.RegularExpressions.Match versionMatch = new System.Text.RegularExpressions.Regex("[\\d]+\\.[\\d]+\\.[\\d]+").Match(bidiClasssFileString);

if (!versionMatch.Success) {
    throw new Exception("Invalid unicode version");
}

string unicodeVersion = versionMatch.Value;

// process the unicode data.
List<(UInt32, string)> bidiClasss = new();
foreach (string line in bidiClasssFileString.Split('\n')) {
    if (line.StartsWith('#')) continue;

    var noCommentLine = line.Split("#")[0];

    var splitLine = noCommentLine.Split(';');
    if (splitLine.Length < 2) continue;


    UInt32 startIndex, stopIndex;
    if (splitLine[0].Contains('.')) {
        var indices = splitLine[0].Split('.');

        startIndex = Convert.ToUInt32(indices[0].Trim(), 16);
        stopIndex = Convert.ToUInt32(indices[2].Trim(), 16);
    } else {
        startIndex = Convert.ToUInt32(splitLine[0].Trim(), 16);
        stopIndex = startIndex;
    }

    string bidiClassString = splitLine[1].Trim();

    // The default bidi type of a character is "L". Becuase of that, if there's no mapping, a character's type
    // is assumed to be "L", so we don't need to create the mappings. This helps to save some mappings which
    // makes generation and compilation faster.
    if (bidiClassString == "L") continue;

    // TODO: C# 7/9 have added range matching capabalities to switches, so I should use them.
    for (UInt32 currentIndex = startIndex; currentIndex <= stopIndex; ++currentIndex) {
        bidiClasss.Add((currentIndex, bidiClassString));
    }
}
#>
namespace NetBidi;

static partial class BidiMap {
    public const string UNICODE_VERSION = "<#= unicodeVersion #>";

    public static BidiClass GetBidiClass(UInt32 bidiChar) {
        return bidiChar switch {
<# foreach ((UInt32 bidiChar, string bidiClass) in bidiClasss) {#>
            <#= bidiChar #> => BidiClass.<#= bidiClass #>,
<# } #>
            _ => BidiClass.L
        };
    }
}